Swift语言有各种各样缺乏（或没有）文档记录的特性（attribute）放在那里等着被使用。让我们一起看看其中的一些特性：

@inline

这个特性为编译器提供了内联提示。有效的取值是__always和never。除非我认为必须要用这两个值，否则就不会使用它（特别是__always）。到目前为止与其相关的规则还不是很明确，在有限的测试下，它可以正常地工作，但还要视具体情况而定。

进一步的解释：尽管底层虚拟机（Low Level Virtual Machine, LLVM）有强制内联的概念，但我们目前还不知道这个@inline特性是否与其直接映射，也不知道是否存在大小方面的限制，但这将会导致编译器忽略这一点而跳过内联。理论上说应该是这样的，但我不保证一定是。

注意（当优化设置关闭时）在调试模式下的构建将忽略@inline。

@transparent

我最初并未将这个特性列出来。该特性会导致编译器在管道（pipeline）中更早地将函数内联。它用于“像+(Int, Int)这样非常原始的函数”，而“不应该用于独立函数”。

甚至在没有优化设置的调试模式下@transparent特性函数就会被内联，所以在调用“1+1”这样的函数的时候并不会特别慢。另外这个特性与@inline（__always）非常类似。

@availability

这个特性可以用来标识某些函数只在某些平台或版本上可用。第一个参数是平台，可以用星号（＊）代表一切可用，还可以是iOS或OS X。因为如果需要针对不同的平台，就要指定多个@availability属性。

如果需要表示该函数在某个给定的平台完全不可用时，可以将第二个参数置为unavailable。此外，还可以用introduced，deprecated和obsoleted来指定一个或是多个版本的组合：obsoleted意味着该项已经删除，deprecated仅仅表示如果使用就会给予警告。最后你可以设置message的值，如果该项被使用了就由编译器输出。下面是一些例子：
